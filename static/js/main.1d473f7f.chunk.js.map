{"version":3,"sources":["serviceWorker.js","App.js","theme.ts","index.js"],"names":["Boolean","window","location","hostname","match","App","Button","theme","createMuiTheme","typography","fontFamily","join","palette","primary","main","dark","contrastText","secondary","error","red","A400","background","default","shadows","Array","fill","overrides","MuiButton","root","borderRadius","textTransform","fontSize","height","textPrimary","paddingLeft","paddingRight","outlinedPrimary","borderColor","MuiFilledInput","underline","borderBottomWidth","input","backgroundClip","MuiDialog","paper","MuiDialogActions","marginBottom","MuiDialogTitle","borderBottom","padding","display","alignItems","fontWeight","marginRight","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"oOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,wBCNSC,MARf,WACE,OACE,6BACE,kBAACC,EAAA,EAAD,gB,gBCFOC,EAAQC,YAAe,CAClCC,WAAY,CACVC,WAAY,CACV,YACA,gBACA,qBACA,WACA,SACA,SACA,iBACA,cACAC,KAAK,MAETC,QAAS,CACPC,QAAS,CACPC,KAAM,oBACNC,KAAM,oBACNC,aAAc,QAEhBC,UAAW,CACTH,KAAM,qBAERI,MAAO,CACLJ,KAAMK,IAAIC,MAEZC,WAAY,CACVC,QAAS,SAGbC,QAASC,MAAM,IAAIC,KAAK,QACxBC,UAAW,CACTC,UAAW,CACTC,KAAM,CACJC,aAAc,GACdC,cAAe,OACfC,SAAU,GACVC,OAAQ,IAEVC,YAAa,CACXC,YAAa,GACbC,aAAc,IAEhBC,gBAAiB,CACfC,YAAa,sBAGjBC,eAAgB,CACdC,UAAW,CACT,UAAW,CACTC,kBAAmB,OAErB,WAAY,CACVH,YAAa,OACbG,kBAAmB,QAGvBC,MAAO,CACLC,eAAgB,uBAGpBC,UAAW,CACTC,MAAO,CACLf,aAAc,KAGlBgB,iBAAkB,CAChBjB,KAAM,CACJkB,aAAc,IAGlBC,eAAgB,CACdnB,KAAM,CACJoB,aAAc,+BACdF,aAAc,GACdG,QAAS,YACT,OAAQ,CACNC,QAAS,OACTC,WAAY,SACZC,WAAY,KAEd,WAAY,CACVH,QAAS,EACTI,YAAa,SC/EvBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACI,kBAACC,EAAA,EAAD,CAAelD,MAAOA,GACpB,kBAAC,EAAD,QAGNmD,SAASC,eAAe,SHqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhD,GACLiD,QAAQjD,MAAMA,EAAMkD,c","file":"static/js/main.1d473f7f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <Button>hello</Button>\n    </div>\n  );\n}\n\nexport default App;\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport { red } from '@material-ui/core/colors';\nimport { Shadows } from '@material-ui/core/styles/shadows';\n\n\nexport const theme = createMuiTheme({\n  typography: {\n    fontFamily: [\n      'system-ui',\n      '-apple-system',\n      'BlinkMacSystemFont',\n      'Segoe UI',\n      'Roboto',\n      'Ubuntu',\n      'Helvetica Neue',\n      'sans-serif',\n    ].join(','),\n  },\n  palette: {\n    primary: {\n      main: 'rgb(29, 161, 242)',\n      dark: 'rgb(26, 145, 218)',\n      contrastText: '#fff',\n    },\n    secondary: {\n      main: 'rgb(26, 145, 218)',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#fff',\n    },\n  },\n  shadows: Array(25).fill('none') as Shadows,\n  overrides: {\n    MuiButton: {\n      root: {\n        borderRadius: 30,\n        textTransform: 'none',\n        fontSize: 16,\n        height: 40,\n      },\n      textPrimary: {\n        paddingLeft: 20,\n        paddingRight: 20,\n      },\n      outlinedPrimary: {\n        borderColor: 'rgb(29, 161, 243)',\n      },\n    },\n    MuiFilledInput: {\n      underline: {\n        '&:after': {\n          borderBottomWidth: '2px',\n        },\n        '&:before': {\n          borderColor: '#000',\n          borderBottomWidth: '2px',\n        },\n      },\n      input: {\n        backgroundClip: 'rgb(245, 248, 250)',\n      },\n    },\n    MuiDialog: {\n      paper: {\n        borderRadius: 15,\n      },\n    },\n    MuiDialogActions: {\n      root: {\n        marginBottom: 8,\n      },\n    },\n    MuiDialogTitle: {\n      root: {\n        borderBottom: '1px solid rgb(204, 214, 221)',\n        marginBottom: 10,\n        padding: '10px 15px',\n        '& h2': {\n          display: 'flex',\n          alignItems: 'center',\n          fontWeight: 800,\n        },\n        '& button': {\n          padding: 8,\n          marginRight: 20,\n        },\n      },\n    },\n  },\n});\n\nexport default theme;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from '@material-ui/core';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport App from './App';\nimport { theme } from './theme';\n\nReactDOM.render(\n  <React.StrictMode>\n      <ThemeProvider theme={theme}>\n        <App />\n      </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}